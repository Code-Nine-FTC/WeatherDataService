name: CI

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Verificar submódulos
        run: ls -R app/core

      - name: Configurar PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/app/core:$PYTHONPATH" >> $GITHUB_ENV
      
      - name: Verificar PYTHONPATH
        run: echo $PYTHONPATH
      
      - name: Inicializar e atualizar submódulos corretamente
        run: |
          git submodule init
          git submodule update --recursive --remote

  database:
    name: Database Check Health
    runs-on: ubuntu-latest
    needs: 
      - setup

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5440:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5440/testdb
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
    
      - name: Instalar PostgreSQL Client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
    
      - name: Espera o serviço do PostgreSQL iniciar
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5440; then
              break
            fi
            sleep 2
          done
    
      - name: Carregar Schema
        run: |
          # Verifica se schema.sql existe na raiz
          if [ -f "schema.sql" ]; then
            echo "Loading schema.sql..."
            PGPASSWORD=testpass psql -h localhost -p 5440 -U testuser -d testdb -f schema.sql
            echo "Schema loaded successfully!"
          else
            echo "ERROR: schema.sql not found in repository root!"
            ls -la  # Lista arquivos para debug
            exit 1
          fi
  
      - name: Verificar estrutura e conexão com o banco de dados
        run: |
          PGPASSWORD=testpass psql -h localhost -p 5440 -U testuser -d testdb -c "\dt"
          pg_isready -h localhost -p 5440

  test:
    name: Testes
    runs-on: ubuntu-latest
    needs: 
      - setup
      - database

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Listar arquivos no diretório atual
        run: ls -R

      - name: Criar ambiente virtual
        run: python -m venv .venv

      - name: Ativar ambiente virtual e instalar dependências
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          source .venv/bin/activate
          task test

  rufflint:
    name: Linting
    runs-on: ubuntu-latest
    needs: 
      - setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Listar arquivos no diretório atual
        run: ls -R

      - name: Criar ambiente virtual
        run: python -m venv .venv

      - name: Ativar ambiente virtual e instalar dependências
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ruff Check
        run: |
          source .venv/bin/activate
          ruff check .
    
  mypy:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: 
      - setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Listar arquivos no diretório atual
        run: ls -R

      - name: Criar ambiente virtual
        run: python -m venv .venv

      - name: Ativar ambiente virtual e instalar dependências
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Mypy Check
        run: |
          source .venv/bin/activate
          mypy .