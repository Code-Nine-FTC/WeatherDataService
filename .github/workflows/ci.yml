name: CI

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Verificar submódulos
        run: ls -R app/core

      - name: Configurar PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/app/core" >> $GITHUB_ENV

      - name: Inicializar e atualizar submódulos
        run: |
          git submodule init
          git submodule update --recursive --remote

  database:
    name: Database Migrations
    runs-on: ubuntu-latest
    needs: setup

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5440:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5440/testdb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar Dependências
        run: |
          python -m venv .venv
          source .venv/bin/activate
          sudo apt-get update
          sudo apt-get install -y python3-dev postgresql-client
          pip install -r requirements.txt

      - name: Esperar PostgreSQL iniciar
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5440; then
              echo "PostgreSQL está pronto"
              break
            fi
            echo "Aguardando PostgreSQL... Tentativa $i/10"
            sleep 2
          done

      - name: Initialize Alembic
        run: |
          source .venv/bin/activate
          alembic init alembic
          # Garante a estrutura de diretórios necessária
          mkdir -p alembic/versions
      
      - name: Set Alembic env.py
        run: |
          echo "${{ secrets.ALEMBIC_ENV }}" > alembic/env.py
          # Configura o alembic.ini corretamente
          echo -e "[alembic]\nscript_location = alembic\nsqlalchemy.url = $DATABASE_URL\n" > alembic.ini

      - name: Aplicar Migrações
        run: |
          source .venv/bin/activate
          timeout 300 alembic upgrade head || (echo "Migration timeout exceeded" && exit 1)

      - name: Database updated
        run: echo "Database successfully updated with Alembic migrations."

  test:
    name: Testes
    runs-on: ubuntu-latest
    needs:
      - setup
      - database

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar Dependências
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar Testes
        run: task test

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Instalar Ruff
        run: pip install ruff

      - name: Rodar Ruff
        run: ruff check .
