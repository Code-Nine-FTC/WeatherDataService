name: CI

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*
  pull_request:
    branches:
      - main
      - develop
      - feature/*
      - hotfix/*

jobs:
  test:
    name: Testes e Linting
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:5432/testdb

    steps:
      - name: Checkout do código com submódulos
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Inicializar e atualizar submódulos corretamente
        run: |
          git submodule init
          git submodule update --recursive --remote

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Verificar submódulos
        run: ls -R app/core

      - name: Configurar PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/app/core:$PYTHONPATH" >> $GITHUB_ENV
      
      - name: Verificar PYTHONPATH
        run: echo $PYTHONPATH

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Criar diretório alembic
        run: alembic init alembic

      - name: Criar alembic.ini
        run: |
          cat <<EOF > alembic.ini
          [alembic]
          script_location = alembic
          sqlalchemy.url = ${DATABASE_URL}
          EOF

      - name: Criar alembic/env.py
        run: |
          mkdir -p alembic
          cat <<EOF > alembic/env.py
          from alembic import context
          from sqlalchemy import engine_from_config, pool
          from logging.config import fileConfig
          from sqlalchemy.ext.asyncio import AsyncAttrs
          from sqlalchemy.orm import DeclarativeBase, Mapped
          import os
          import sys

          sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../app/core')))
          
          class Base(AsyncAttrs, DeclarativeBase):
            pass

          config = context.config

          target_metadata = Base.metadata

          def run_migrations_offline():
              url = config.get_main_option("sqlalchemy.url")
              context.configure(
                  url=url,
                  target_metadata=target_metadata,
                  literal_binds=True,
                  dialect_opts={"paramstyle": "named"},
              )

              with context.begin_transaction():
                  context.run_migrations()

          def run_migrations_online():
              connectable = engine_from_config(
                  config.get_section(config.config_ini_section),
                  prefix='sqlalchemy.',
                  poolclass=pool.NullPool,
              )

              with connectable.connect() as connection:
                  context.configure(
                      connection=connection,
                      target_metadata=target_metadata
                  )

                  with context.begin_transaction():
                      context.run_migrations()

          if context.is_offline_mode():
              run_migrations_offline()
          else:
              run_migrations_online()
          EOF

      - name: Run Alembic Migrations
        run: |
              git submodule init
              git submodule update --recursive --remote
              alembic -c alembic.ini upgrade head

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Run tests
        run: pytest --cov=app -vv

      - name: Generate coverage report
        if: always()
        run: coverage html
